import * as NodeCrypto from "crypto";
import * as StringUtil from "./string_util.js";

/**
 * Generate random base64 key
 * @param length Length of the key to be generated
 * @returns Generated key in string format
 */
export function generateBase64RandomKey(length: number = 32): string {
    return StringUtil.multiReplace(
        NodeCrypto.randomBytes(length).toString("base64").substr(0, length),
        ["+", "/"],
        ["_", "-"]
    );
}

/**
 * Validates if the given data is tampered.
 * @param data Data to be validated. The data must be previously
 * generated by `[hashData()]`.
 * @param key Secret key that was previously used to generate the hash for the data in `[hashData()]`.
 * function to see the supported hashing algorithms on your system. This must be the same
 * as the value passed to `[hashData()]` when generating the hash for the data.
 * @param algorithm Algorithm used to generate the data
 * @return the real data with the hash stripped off. False if the data is tampered.
 * @see hashData()
 */
export function validateData(data: string, key: string, algorithm: string = "sha256"): string | boolean {
    const hashLength = NodeCrypto.createHmac(algorithm, key).update("test").digest("base64").length;
    if (data.length >= hashLength) {
        const hash = data.substr(0, hashLength);
        const pureData = data.substr(hashLength, data.length - hashLength);
        const calculatedHash = NodeCrypto.createHmac(algorithm, key).update(pureData).digest("base64");
        if (NodeCrypto.timingSafeEqual(Buffer.from(hash), Buffer.from(calculatedHash))) {
            return pureData;
        }
    }
    return false;
}

/**
 * Prefixes data with a keyed hash value so that it can later be detected if it is tampered.
 * @param data Data to be protected
 * @param key Secret key to be used for generating hash
 * @param algorithm Hashing algorithm (e.g. "md5", "sha1", "sha256", etc.)
 * @return Data prefixed with the keyed hash
 * @see validateData()
 */
export function hashData(data: string, key: string, algorithm: string = "sha256"): string {
    const hash = NodeCrypto.createHmac(algorithm, key).update(data).digest("base64");
    return hash + data;
}
